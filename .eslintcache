[{"/home/juan/projects/seven_guis/src/index.js":"1","/home/juan/projects/seven_guis/src/App.js":"2","/home/juan/projects/seven_guis/src/guis/circledrawer/index.js":"3","/home/juan/projects/seven_guis/src/guis/circledrawer/CircleDialog.js":"4","/home/juan/projects/seven_guis/src/guis/circledrawer/helpers.js":"5","/home/juan/projects/seven_guis/src/guis/circledrawer/CircleMenu.js":"6","/home/juan/projects/seven_guis/src/guis/cells/index.js":"7","/home/juan/projects/seven_guis/src/guis/cells/Table.js":"8","/home/juan/projects/seven_guis/src/guis/cells/Row.js":"9","/home/juan/projects/seven_guis/src/guis/cells/Cell.js":"10","/home/juan/projects/seven_guis/src/guis/cells/parser.js":"11"},{"size":197,"mtime":1607859949362,"results":"12","hashOfConfig":"13"},{"size":172,"mtime":1610810433486,"results":"14","hashOfConfig":"13"},{"size":4598,"mtime":1610809706814,"results":"15","hashOfConfig":"16"},{"size":1079,"mtime":1610806442114,"results":"17","hashOfConfig":"16"},{"size":350,"mtime":1610806068962,"results":"18","hashOfConfig":"16"},{"size":757,"mtime":1610806202194,"results":"19","hashOfConfig":"16"},{"size":125,"mtime":1610835292183,"results":"20","hashOfConfig":"13"},{"size":1406,"mtime":1611345323085,"results":"21","hashOfConfig":"13"},{"size":436,"mtime":1611322469997,"results":"22","hashOfConfig":"13"},{"size":1234,"mtime":1611342069077,"results":"23","hashOfConfig":"13"},{"size":1271,"mtime":1611347043813,"results":"24","hashOfConfig":"13"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},"cidjti",{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"r9k9q5",{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"27"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},"/home/juan/projects/seven_guis/src/index.js",[],["50","51"],"/home/juan/projects/seven_guis/src/App.js",[],"/home/juan/projects/seven_guis/src/guis/circledrawer/index.js",[],"/home/juan/projects/seven_guis/src/guis/circledrawer/CircleDialog.js",[],"/home/juan/projects/seven_guis/src/guis/circledrawer/helpers.js",[],"/home/juan/projects/seven_guis/src/guis/circledrawer/CircleMenu.js",[],"/home/juan/projects/seven_guis/src/guis/cells/index.js",[],"/home/juan/projects/seven_guis/src/guis/cells/Table.js",[],"/home/juan/projects/seven_guis/src/guis/cells/Row.js",[],"/home/juan/projects/seven_guis/src/guis/cells/Cell.js",["52"],"import React, { useEffect, useState } from \"react\";\nimport { parseFormula } from \"./parser\";\n\nconst Cell = ({ idRow, idCol, activeCells, changeCells }) => {\n  const [cell, setCell] = useState({\n    col: idCol,\n    row: idRow,\n    value: \"\",\n    formula: \"\",\n  });\n  const [clicked, setClicked] = useState(false);\n\n  const handleChange = (e) => {\n    setCell({ ...cell, formula: e.target.value });\n  };\n\n  const handleFocus = () => {\n    setClicked(true);\n  };\n\n  const handleBlur = () => {\n    if (cell.formula !== \"\") {\n      setCell({ ...cell, value: parseFormula(cell.formula, activeCells) });\n      changeCells({ ...cell, value: parseFormula(cell.formula, activeCells) });\n    }\n    setClicked(false);\n  };\n\n  return (\n    <td\n      style={{\n        padding: 0,\n        margin: 0,\n      }}\n    >\n      <input\n        type='text'\n        style={{\n          margin: 0,\n          padding: 0,\n          width: \"100px\",\n          height: \"30px\",\n          appearance: \"none\",\n          border: \"none\",\n          textAlign: \"center\",\n        }}\n        value={clicked ? cell.formula : cell.value}\n        onChange={handleChange}\n        onFocus={handleFocus}\n        onBlur={handleBlur}\n      />\n    </td>\n  );\n};\n\nexport default Cell;\n","/home/juan/projects/seven_guis/src/guis/cells/parser.js",["53","54"],"// ---NEED TO BUILD A PARSER!!!-----\n\n// ----CONSTANTS-----\n\nconst DIGITS = \"0123456789.\";\nconst LETTERS = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n\nexport const parseFormula = (text, cells) => {\n  if (text[0] === \"=\") {\n    return parseExpr(text.slice(1), cells);\n  } else {\n    return text;\n  }\n};\n\nconst parseExpr = (expr, cells) => {\n  const tokens = expr.split(/:|,|\\(|\\)/g);\n  if (tokens.length === 4) {\n    const obj1 = cells.find(\n      (cell) => cell.col === tokens[1][0] && cell.row === parseInt(tokens[1][1])\n    );\n    const obj2 = cells.find(\n      (cell) => cell.col === tokens[2][0] && cell.row === parseInt(tokens[2][1])\n    );\n    const cellRange = cells.filter(\n      (cell) =>\n        cell.col <= obj2.col &&\n        cell.row <= obj2.row &&\n        cell.col >= obj1.col &&\n        cell.row >= obj1.row\n    );\n    if (tokens[0] === \"sum\") {\n      return result(sum, cellRange);\n    }\n  } else if (tokens.length === 1) {\n    const ref = cells.find(\n      (cell) => cell.col === tokens[0][0] && cell.row === parseInt(tokens[0][1])\n    );\n    if (ref) return ref.value;\n  }\n};\n\nconst sum = (values) => {\n  return values.reduce((a, b) => a + b);\n};\n\nconst result = (fun, range) => {\n  const values = range.map((cell) => parseInt(cell.value));\n  return fun(values);\n};\n",{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","severity":1,"message":"60","line":1,"column":17,"nodeType":"61","messageId":"62","endLine":1,"endColumn":26},{"ruleId":"59","severity":1,"message":"63","line":5,"column":7,"nodeType":"61","messageId":"62","endLine":5,"endColumn":13},{"ruleId":"59","severity":1,"message":"64","line":6,"column":7,"nodeType":"61","messageId":"62","endLine":6,"endColumn":14},"no-native-reassign",["65"],"no-negated-in-lhs",["66"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'DIGITS' is assigned a value but never used.","'LETTERS' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]